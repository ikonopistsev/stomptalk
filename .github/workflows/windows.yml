---
name: windows

on:
  pull_request:
    types: [opened, synchronize]
    paths-ignore:
      - '**.md'
      - '.mailmap'
      - 'ChangeLog*'
      - 'whatsnew*'
      - 'LICENSE'
  push:
    paths-ignore:
      - '**.md'
      - '.mailmap'
      - 'ChangeLog*'
      - 'whatsnew*'
      - 'LICENSE'

jobs:
  vs2019:
    runs-on: ${{ matrix.os }}
    if: "!contains(github.event.head_commit.message, 'ci skip')"
    strategy:
      fail-fast: false
      matrix:
        os: [windows-2019]

    steps:
      - uses: actions/checkout

      - name: Prepare vcpkg
        uses: lukka/run-vcpkg@v2
        id: runvcpkg
        with:
          vcpkgDirectory: ${{ runner.workspace }}/vcpkg/
          vcpkgGitCommitId: 8e76503a769e15

      - name: Build And Test
        shell: powershell
        run: |
          mkdir build -ea 0
          cd build
          $CMAKE_CMD="cmake -G 'Visual Studio 16 2019' -A x64 -DCMAKE_TOOLCHAIN_FILE=${{ runner.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake .. $EVENT_CMAKE_OPTIONS"
          function cmake_configure($retry)
          {
            $errcode=0
            try {
              if ($retry -eq 0) {
                echo "[cmake configure retry] $CMAKE_CMD"
              } else {
                echo "[cmake configure] $CMAKE_CMD"
              }
              Invoke-Expression $CMAKE_CMD
              $errcode=$LastExitCode
            }
            catch {
              $errcode=1
            }
            finally {
              if ($errcode -ne 0) {
                if ($retry -eq 0) {
                  $host.SetShouldExit($LastExitCode)
                } else {
                  echo "Remove all entries in build directory"
                  rm -r -fo *
                  cmake_configure 0
                }
              }
            }
          }
          cmake_configure 1
          try {
            cmake --build . -- /nologo /verbosity:minimal
            if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }
            if ("${{ matrix.EVENT_MATRIX }}" -eq "TEST_EXPORT_STATIC") {
              python ../test-export/test-export.py static
            }
            elseif ("${{ matrix.EVENT_MATRIX }}" -eq "TEST_EXPORT_SHARED") {
              python ../test-export/test-export.py shared
            }
            else {
              ctest --output-on-failure -j $EVENT_TESTS_PARALLEL
              if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }
            }
          } catch {
            $host.SetShouldExit($LastExitCode)
          }
      - uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: ${{ matrix.os }}-${{ matrix.EVENT_MATRIX }}-build
          path: build
