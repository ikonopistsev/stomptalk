import fnv1a from '@sindresorhus/fnv1a';

const m = [
    "ack",
    "nack",
    "send",
    "abort",
    "begin",
    "error",
    "stomp",
    "commit",
    "connect",
    "message",
    "receipt",
    "subscribe",
    "connected",
    "disconnect",
    "unsubscribe"
];

const method = m.sort();

const none = 0;
const unknown = "18446744073709551615";


// generate header
console.log("#ifndef stomptalk_method_h");
console.log("#define stomptalk_method_h\n");
console.log("// generated by stomptalkgen.js");
console.log("enum stomptalk_method {");
console.log("\tst_method_none =", none + "ULL,");
method.forEach(elem => {
    const text = elem.toUpperCase();
    console.log("\tst_method_" + elem, "=", fnv1a(text, {size: 64}).toString() + "ULL,");
});
console.log("\tst_method_unknown =", unknown + "ULL");
console.log("};\n");
console.log("#endif // stomptalk_method_h");

console.log("");
console.log("");
console.log("");


for (let i = 0, size = method.length; i < size; ++i) {
    const name = method[i];
    console.log("struct " + name  + " {");
    if (i == 0)
        console.log("\tconstexpr static auto num = 0;");
    else 
        console.log("\tconstexpr static auto num = " + method[i - 1] + "::num + 1;");
    console.log("\tconstexpr static auto text = \"" + name.toUpperCase() + "\"sv;");
    console.log("\tconstexpr static auto text_size = text.size();");
    console.log("\tconstexpr static auto text_hash = static_hash<" + name + ", st_method_" + name + ">::value;");
    console.log("};\n");
}

console.log("");
console.log("");
console.log("");


const header_content_type = [
    "text/xml",
    "text/html",
    "text/plain",
    "application/xml",
    "application/json",
    "application/octet-stream"
];

const header_accept_version = [
    "1.2"
];

const header_ack = [
    "client",
    "client-individual"
];

const header_content_encodig = [
    "identity",
    "deflate",
    "compress",
    "gzip",
    "x-gzip",
    "br"
];

const h = [
    "content-length",
    "content-type",
    "accept-version",
    "host",
    "version",
    "login",
    "server",
    "passcode",
    "heart-beat",
    "destination",
    "id",
    "transaction",
    "message-id",
    "subscription",
    "receipt-id",
    "session",
    "ack",
    "receipt",
    "message",
    "prefetch-count",
    "durable",
    "auto_delete",
    "x-message-ttl",
    "expires",
    "x-max-length",
    "x-max-length-bytes",
    "x-dead-letter-exchange",
    "x-dead-letter-routing-key",
    "x-max-priority",
    "persistent",
    "reply-to",
    "redelivered",
    "x-original-exchange",
    "x-original-routing-key",
    "x-queue-name",
    "x-queue-type",
    "content-encoding",
    "priority",
    "correlation-id",
    "expiration",
    "amqp-message-id",
    "timestamp",
    "amqp_type",
    "user-id",
    "app-id",
    "cluster-id",
    "delivery-mode",
    "requeue"
];

const header = h.sort();

console.log("#ifndef stomptalk_header_h");
console.log("#define stomptalk_header_h\n");
console.log("// generated by stomptalkgen.js");
console.log("enum stomptalk_header {");
console.log("\tst_header_none =", none + "ULL,");
header.forEach(elem => {
    let text = elem;
    if (text.startsWith("x-"))
        text = text.slice(2);
    text = text.replaceAll("-", "_");
    console.log("\tst_header_" + text, "=", fnv1a(elem, {size: 64}).toString() + "ULL,");
});
console.log("\tst_header_unknown =", unknown + "ULL");
console.log("};\n");
console.log("#endif // stomptalk_header_h");

console.log("");
console.log("");
console.log("");

const def_header = (elem, name, prev) => {
    console.log("struct " + name  + " {");
    if (prev == null)
        console.log("\tconstexpr static auto num = 0;");
    else 
        console.log("\tconstexpr static auto num = " + prev + "::num + 1;");
    console.log("\tconstexpr static auto mask = 1ull << num;");
    console.log("\tconstexpr static auto header = \"\\n" + elem + ":\"sv;");
    console.log("\tconstexpr static auto header_size = header.size();");
    console.log("\tconstexpr static auto text = header.substr(1, header_size - 2);");
    console.log("\tconstexpr static auto text_size = text.size();");
    console.log("\tconstexpr static auto text_hash = static_hash<" + name + ", st_header_" + name + ">::value;");
}

const additional_header = (elem, arr, pref) => {
    for (let i = 0, size = arr.length; i < size; ++i) {
        let text = arr[i];
        text = text.replaceAll("-", "_");
        text = text.replaceAll("/", "_");
        text = text.replaceAll(".", "");
        console.log("\tconstexpr static auto header_" + pref + text + "() noexcept {");
        console.log("\t\treturn \"\\n" + elem + ":" + arr[i] + "\"sv;");
        console.log("\t}");
        console.log("\tconstexpr static auto " + pref + text + "() noexcept {");
        console.log("\t\treturn header_" + pref + text + "().substr(header_size);");
        console.log("\t}");
    }
}

const additional_boolean = (elem) => {
    console.log("\tconstexpr static auto header_enable() noexcept {");
    console.log("\t\treturn \"\\n" + elem + ":true\"sv;");
    console.log("\t}");
    console.log("\tconstexpr static auto enable() noexcept {");
    console.log("\t\treturn header_enable().substr(header_size);");
    console.log("\t}");
    console.log("\tconstexpr static auto header_disable() noexcept {");
    console.log("\t\treturn \"\\n" + elem + ":false\"sv;");
    console.log("\t}");
    console.log("\tconstexpr static auto disable() noexcept {");
    console.log("\t\treturn header_disable().substr(header_size);");
    console.log("\t}");
}

const custom_header = {
    "content-type": (elem, name)=>{
        console.log("");
        additional_header(elem, header_content_type, "");
    },
    "accept-version": (elem, name)=>{
        console.log("");
        additional_header(elem, header_accept_version, "v");
    },
    "version": (elem, name)=>{
        console.log("");
        additional_header(elem, header_accept_version, "v");
    },
    "ack": (elem, name)=>{
        console.log("");
        additional_header(elem, header_ack, "");
    },
    "auto-delete": (elem, name)=>{
        console.log("");
        additional_boolean(elem);
    },
    "persistent": (elem, name)=>{
        console.log("");
        additional_boolean(elem);
    },
    "content-encoding": (elem, name)=>{
        console.log("");
        additional_header(elem, header_content_encodig, "");
    }
}

for (let i = 0, size = header.length; i < size; ++i) {
    const name = header[i];
    const prev = (i == 0) ? null : header[i - 1];

    let cxx_name = name;
    if (cxx_name.startsWith("x-"))
        cxx_name = cxx_name.slice(2);
    cxx_name = cxx_name.replaceAll("-", "_");
    
    let cxx_prev = prev;
    if (cxx_prev != null) {
        if (cxx_prev.startsWith("x-"))
            cxx_prev = cxx_prev.slice(2);
        cxx_prev = cxx_prev.replaceAll("-", "_");
    }
    def_header(name, cxx_name, cxx_prev);
    if (custom_header.hasOwnProperty(name))
        custom_header[name](name, cxx_prev);

    console.log("};\n");
}